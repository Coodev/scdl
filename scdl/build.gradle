buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'http://download.crashlytics.com/maven' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
        classpath 'com.squareup.gradle:gradle-android-test-plugin:0.9.1-SNAPSHOT'
        classpath 'me.tatarka:gradle-retrolambda:1.3.3'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'retrolambda'
apply plugin: 'crashlytics'

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url 'https://github.com/dahlgren/vpi-aar/raw/master'
    }

    maven {
        url 'https://raw.github.com/ark/ark/master/releases'
    }

    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    maven {
        url 'https://oss.sonatype.org/content/groups/staging/'
    }

    maven {
        url 'http://download.crashlytics.com/maven'
    }

    maven {
        url 'https://guardian.github.com/maven/repo-releases'
    }
}

android {
    compileSdkVersion 20
    buildToolsVersion "19.1.0"

    defaultConfig {
        versionCode 1068
        versionName "1.8.4"
        minSdkVersion 14
        targetSdkVersion 19
    }

    signingConfigs {
        release {
            if ('assembleRelease' in gradle.startParameter.taskNames) {
                storeFile file(System.getenv('ANDROID_KEYSTORE'))
                storePassword System.console().readLine("\n\$ Enter store password: ")
                keyAlias System.getenv('ANDROID_KEY_ALIAS')
                keyPassword System.console().readLine("\n\$ Enter key password: ")
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        play {
            buildConfigField "net.rdrei.android.scdl2.Config.MARKETPLACE_TYPE",
                    "STORE", "net.rdrei.android.scdl2.Config.MARKETPLACE_TYPE.GOOGLE_PLAY"
            buildConfigField "boolean", "PAID_BUILD", "false"
        }

        amazon {
            buildConfigField "net.rdrei.android.scdl2.Config.MARKETPLACE_TYPE",
                    "STORE", "net.rdrei.android.scdl2.Config.MARKETPLACE_TYPE.AMAZON"
            buildConfigField "boolean", "PAID_BUILD", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // Prod dependencies
    compile 'com.android.support:support-v4:19.1.0'
    compile 'net.rdrei.android.viewpagerindicator:library:2.5.0-SNAPSHOT@aar'
    compile 'com.google.android.gms:play-services:5.2.08'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.google.code.gson:gson:2.3'
    compile 'net.rdrei.android.dirchooser:library:2.1@aar'
    compile 'javax.inject:javax.inject:1'
    compile 'com.crashlytics.android:crashlytics:1.1.11'
    compile 'com.squareup.picasso:picasso:2.3.4'
    compile 'com.github.gabrielemariotti.changeloglib:library:1.5.1'
    compile 'com.google.code.findbugs:jsr305:2.0.3'
    compile 'com.gu:option:1.3'

    compile files('libs/guice-3.0-no_aop.jar')
    compile('org.roboguice:roboguice:2.0') {
        exclude group: 'com.google.inject'
    }
    compile('com.google.inject.extensions:guice-assistedinject:3.0') {
        exclude group: 'com.google.inject'
    }
    compile('de.keyboardsurfer.android.widget:crouton:1.8.1') {
        exclude group: 'com.google.android', module: 'support-v4'
    }

    // Test dependencies (for the IDE)
    androidTestCompile 'junit:junit:4.11'
    androidTestCompile 'org.robolectric:robolectric:2.3-SNAPSHOT'
    androidTestCompile 'com.squareup:fest-android:1.0.8'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
}

// prevent the "superClassName is empty" error for classes not annotated as tests
tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.*" // whatever Ant pattern matches your test class files
}

task addTest {
    def src = ['src/test/java']

    if (new File('scdl-scdl.iml').exists()) {
        def file = file('scdl-scdl.iml')
        doLast {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find { it.@url == path }
                if (set == null) {
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
        }
    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    preBuild.dependsOn(addTest)
}
